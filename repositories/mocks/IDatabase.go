// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dto "pocket-message/dto"
	models "pocket-message/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IDatabase is an autogenerated mock type for the IDatabase type
type IDatabase struct {
	mock.Mock
}

// DeletePocketMessage provides a mock function with given fields: pocket_message_uuid
func (_m *IDatabase) DeletePocketMessage(pocket_message_uuid uuid.UUID) error {
	ret := _m.Called(pocket_message_uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(pocket_message_uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPocketMessageByRandomID provides a mock function with given fields: random_id
func (_m *IDatabase) GetPocketMessageByRandomID(random_id string) (dto.PocketMessageWithRandomID, error) {
	ret := _m.Called(random_id)

	var r0 dto.PocketMessageWithRandomID
	if rf, ok := ret.Get(0).(func(string) dto.PocketMessageWithRandomID); ok {
		r0 = rf(random_id)
	} else {
		r0 = ret.Get(0).(dto.PocketMessageWithRandomID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(random_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPocketMessageByUserUUID provides a mock function with given fields: pocket_message_uuid
func (_m *IDatabase) GetPocketMessageByUserUUID(pocket_message_uuid uuid.UUID) ([]dto.OwnedMessage, error) {
	ret := _m.Called(pocket_message_uuid)

	var r0 []dto.OwnedMessage
	if rf, ok := ret.Get(0).(func(uuid.UUID) []dto.OwnedMessage); ok {
		r0 = rf(pocket_message_uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.OwnedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(pocket_message_uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *IDatabase) GetUserByUsername(username string) (models.User, error) {
	ret := _m.Called(username)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *IDatabase) Login(username string, password string) (models.User, error) {
	ret := _m.Called(username, password)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNewPocketMessage provides a mock function with given fields: pocket_message_model
func (_m *IDatabase) SaveNewPocketMessage(pocket_message_model models.PocketMessage) error {
	ret := _m.Called(pocket_message_model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PocketMessage) error); ok {
		r0 = rf(pocket_message_model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNewRandomID provides a mock function with given fields: random_id_model
func (_m *IDatabase) SaveNewRandomID(random_id_model models.PocketMessageRandomID) error {
	ret := _m.Called(random_id_model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PocketMessageRandomID) error); ok {
		r0 = rf(random_id_model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNewUser provides a mock function with given fields: _a0
func (_m *IDatabase) SaveNewUser(_a0 models.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: user_model
func (_m *IDatabase) UpdatePassword(user_model models.User) error {
	ret := _m.Called(user_model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user_model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePocketMessage provides a mock function with given fields: pocket_message_model
func (_m *IDatabase) UpdatePocketMessage(pocket_message_model models.PocketMessage) error {
	ret := _m.Called(pocket_message_model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PocketMessage) error); ok {
		r0 = rf(pocket_message_model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsername provides a mock function with given fields: user_model
func (_m *IDatabase) UpdateUsername(user_model models.User) error {
	ret := _m.Called(user_model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user_model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVisitCount provides a mock function with given fields: pocket_message_with_random_id
func (_m *IDatabase) UpdateVisitCount(pocket_message_with_random_id dto.PocketMessageWithRandomID) error {
	ret := _m.Called(pocket_message_with_random_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.PocketMessageWithRandomID) error); ok {
		r0 = rf(pocket_message_with_random_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDatabase creates a new instance of IDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDatabase(t mockConstructorTestingTNewIDatabase) *IDatabase {
	mock := &IDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
