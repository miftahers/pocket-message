// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dto "pocket-message/dto"
	models "pocket-message/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IPocketMessageServices is an autogenerated mock type for the IPocketMessageServices type
type IPocketMessageServices struct {
	mock.Mock
}

// DeletePocketMessage provides a mock function with given fields: id
func (_m *IPocketMessageServices) DeletePocketMessage(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPocketMessageByRandomID provides a mock function with given fields: randomID
func (_m *IPocketMessageServices) GetPocketMessageByRandomID(randomID string) (dto.MsgForPublic, error) {
	ret := _m.Called(randomID)

	var r0 dto.MsgForPublic
	if rf, ok := ret.Get(0).(func(string) dto.MsgForPublic); ok {
		r0 = rf(randomID)
	} else {
		r0 = ret.Get(0).(dto.MsgForPublic)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(randomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPocketMessage provides a mock function with given fields: token
func (_m *IPocketMessageServices) GetUserPocketMessage(token dto.Token) ([]dto.OwnedMessage, error) {
	ret := _m.Called(token)

	var r0 []dto.OwnedMessage
	if rf, ok := ret.Get(0).(func(dto.Token) []dto.OwnedMessage); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.OwnedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPocketMessage provides a mock function with given fields: msg, token
func (_m *IPocketMessageServices) NewPocketMessage(msg models.PocketMessage, token dto.Token) error {
	ret := _m.Called(msg, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PocketMessage, dto.Token) error); ok {
		r0 = rf(msg, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePocketMessage provides a mock function with given fields: pocketMessage
func (_m *IPocketMessageServices) UpdatePocketMessage(pocketMessage models.PocketMessage) error {
	ret := _m.Called(pocketMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PocketMessage) error); ok {
		r0 = rf(pocketMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIPocketMessageServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPocketMessageServices creates a new instance of IPocketMessageServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPocketMessageServices(t mockConstructorTestingTNewIPocketMessageServices) *IPocketMessageServices {
	mock := &IPocketMessageServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
