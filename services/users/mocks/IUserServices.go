// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dto "pocket-message/dto"
	models "pocket-message/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserServices is an autogenerated mock type for the IUserServices type
type IUserServices struct {
	mock.Mock
}

// Login provides a mock function with given fields: user
func (_m *IUserServices) Login(user models.User) (dto.Login, error) {
	ret := _m.Called(user)

	var r0 dto.Login
	if rf, ok := ret.Get(0).(func(models.User) dto.Login); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(dto.Login)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: user
func (_m *IUserServices) SignUp(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: user
func (_m *IUserServices) UpdatePassword(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsername provides a mock function with given fields: user, token
func (_m *IUserServices) UpdateUsername(user models.User, token dto.Token) error {
	ret := _m.Called(user, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User, dto.Token) error); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserServices creates a new instance of IUserServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserServices(t mockConstructorTestingTNewIUserServices) *IUserServices {
	mock := &IUserServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
